/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Lab as PrismaLab,
  Computer as PrismaComputer,
} from "@prisma/client";

export class LabServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LabCountArgs, "select">): Promise<number> {
    return this.prisma.lab.count(args);
  }

  async labs(args: Prisma.LabFindManyArgs): Promise<PrismaLab[]> {
    return this.prisma.lab.findMany(args);
  }
  async lab(args: Prisma.LabFindUniqueArgs): Promise<PrismaLab | null> {
    return this.prisma.lab.findUnique(args);
  }
  async createLab(args: Prisma.LabCreateArgs): Promise<PrismaLab> {
    return this.prisma.lab.create(args);
  }
  async updateLab(args: Prisma.LabUpdateArgs): Promise<PrismaLab> {
    return this.prisma.lab.update(args);
  }
  async deleteLab(args: Prisma.LabDeleteArgs): Promise<PrismaLab> {
    return this.prisma.lab.delete(args);
  }

  async findComputers(
    parentId: string,
    args: Prisma.ComputerFindManyArgs
  ): Promise<PrismaComputer[]> {
    return this.prisma.lab
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .computers(args);
  }
}
