/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Lab } from "./Lab";
import { LabCountArgs } from "./LabCountArgs";
import { LabFindManyArgs } from "./LabFindManyArgs";
import { LabFindUniqueArgs } from "./LabFindUniqueArgs";
import { CreateLabArgs } from "./CreateLabArgs";
import { UpdateLabArgs } from "./UpdateLabArgs";
import { DeleteLabArgs } from "./DeleteLabArgs";
import { ComputerFindManyArgs } from "../../computer/base/ComputerFindManyArgs";
import { Computer } from "../../computer/base/Computer";
import { LabService } from "../lab.service";
@graphql.Resolver(() => Lab)
export class LabResolverBase {
  constructor(protected readonly service: LabService) {}

  async _labsMeta(
    @graphql.Args() args: LabCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Lab])
  async labs(@graphql.Args() args: LabFindManyArgs): Promise<Lab[]> {
    return this.service.labs(args);
  }

  @graphql.Query(() => Lab, { nullable: true })
  async lab(@graphql.Args() args: LabFindUniqueArgs): Promise<Lab | null> {
    const result = await this.service.lab(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Lab)
  async createLab(@graphql.Args() args: CreateLabArgs): Promise<Lab> {
    return await this.service.createLab({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Lab)
  async updateLab(@graphql.Args() args: UpdateLabArgs): Promise<Lab | null> {
    try {
      return await this.service.updateLab({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Lab)
  async deleteLab(@graphql.Args() args: DeleteLabArgs): Promise<Lab | null> {
    try {
      return await this.service.deleteLab(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Computer], { name: "computers" })
  async findComputers(
    @graphql.Parent() parent: Lab,
    @graphql.Args() args: ComputerFindManyArgs
  ): Promise<Computer[]> {
    const results = await this.service.findComputers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
