/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Computer } from "./Computer";
import { ComputerCountArgs } from "./ComputerCountArgs";
import { ComputerFindManyArgs } from "./ComputerFindManyArgs";
import { ComputerFindUniqueArgs } from "./ComputerFindUniqueArgs";
import { CreateComputerArgs } from "./CreateComputerArgs";
import { UpdateComputerArgs } from "./UpdateComputerArgs";
import { DeleteComputerArgs } from "./DeleteComputerArgs";
import { BookingFindManyArgs } from "../../booking/base/BookingFindManyArgs";
import { Booking } from "../../booking/base/Booking";
import { Lab } from "../../lab/base/Lab";
import { ComputerService } from "../computer.service";
@graphql.Resolver(() => Computer)
export class ComputerResolverBase {
  constructor(protected readonly service: ComputerService) {}

  async _computersMeta(
    @graphql.Args() args: ComputerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Computer])
  async computers(
    @graphql.Args() args: ComputerFindManyArgs
  ): Promise<Computer[]> {
    return this.service.computers(args);
  }

  @graphql.Query(() => Computer, { nullable: true })
  async computer(
    @graphql.Args() args: ComputerFindUniqueArgs
  ): Promise<Computer | null> {
    const result = await this.service.computer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Computer)
  async createComputer(
    @graphql.Args() args: CreateComputerArgs
  ): Promise<Computer> {
    return await this.service.createComputer({
      ...args,
      data: {
        ...args.data,

        lab: args.data.lab
          ? {
              connect: args.data.lab,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Computer)
  async updateComputer(
    @graphql.Args() args: UpdateComputerArgs
  ): Promise<Computer | null> {
    try {
      return await this.service.updateComputer({
        ...args,
        data: {
          ...args.data,

          lab: args.data.lab
            ? {
                connect: args.data.lab,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Computer)
  async deleteComputer(
    @graphql.Args() args: DeleteComputerArgs
  ): Promise<Computer | null> {
    try {
      return await this.service.deleteComputer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Booking], { name: "bookings" })
  async findBookings(
    @graphql.Parent() parent: Computer,
    @graphql.Args() args: BookingFindManyArgs
  ): Promise<Booking[]> {
    const results = await this.service.findBookings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Lab, {
    nullable: true,
    name: "lab",
  })
  async getLab(@graphql.Parent() parent: Computer): Promise<Lab | null> {
    const result = await this.service.getLab(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
