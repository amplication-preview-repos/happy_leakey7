/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Computer as PrismaComputer,
  Booking as PrismaBooking,
  Lab as PrismaLab,
} from "@prisma/client";

export class ComputerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ComputerCountArgs, "select">): Promise<number> {
    return this.prisma.computer.count(args);
  }

  async computers(
    args: Prisma.ComputerFindManyArgs
  ): Promise<PrismaComputer[]> {
    return this.prisma.computer.findMany(args);
  }
  async computer(
    args: Prisma.ComputerFindUniqueArgs
  ): Promise<PrismaComputer | null> {
    return this.prisma.computer.findUnique(args);
  }
  async createComputer(
    args: Prisma.ComputerCreateArgs
  ): Promise<PrismaComputer> {
    return this.prisma.computer.create(args);
  }
  async updateComputer(
    args: Prisma.ComputerUpdateArgs
  ): Promise<PrismaComputer> {
    return this.prisma.computer.update(args);
  }
  async deleteComputer(
    args: Prisma.ComputerDeleteArgs
  ): Promise<PrismaComputer> {
    return this.prisma.computer.delete(args);
  }

  async findBookings(
    parentId: string,
    args: Prisma.BookingFindManyArgs
  ): Promise<PrismaBooking[]> {
    return this.prisma.computer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bookings(args);
  }

  async getLab(parentId: string): Promise<PrismaLab | null> {
    return this.prisma.computer
      .findUnique({
        where: { id: parentId },
      })
      .lab();
  }
}
